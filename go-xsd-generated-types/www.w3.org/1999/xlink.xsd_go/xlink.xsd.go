//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/1999/xlink.xsd
package go_Xlink

//	This schema document provides attribute declarations and
//	attribute group, complex type and simple type definitions which can be used in
//	the construction of user schemas to define the structure of particular linking
//	constructs, e.g.
//	<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
//	xmlns:xl="http://www.w3.org/1999/xlink">
//	<xs:import namespace="http://www.w3.org/1999/xlink"
//	location="http://www.w3.org/1999/xlink.xsd">
//	<xs:element name="mySimple">
//	<xs:complexType>
//	...
//	<xs:attributeGroup ref="xl:simpleAttrs"/>
//	...
//	</xs:complexType>
//	</xs:element>
//	...
//	</xs:schema>

import (
	xsdt "github.com/metaleap/go-xsd/types"
	xml "github.comcast.com/jcolwe200/scte224.git/go-xsd-generated-types/www.w3.org/2001/xml.xsd_go"
)

type TtypeType xsdt.Token

//	Returns true if the value of this enumerated TtypeType is "locator".
func (me TtypeType) IsLocator() bool { return me.String() == "locator" }

//	Returns true if the value of this enumerated TtypeType is "arc".
func (me TtypeType) IsArc() bool { return me.String() == "arc" }

//	Since TtypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtypeType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TtypeType is just a simple String type, this merely returns the current string value.
func (me TtypeType) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TtypeType is "simple".
func (me TtypeType) IsSimple() bool { return me.String() == "simple" }

//	Returns true if the value of this enumerated TtypeType is "extended".
func (me TtypeType) IsExtended() bool { return me.String() == "extended" }

//	Returns true if the value of this enumerated TtypeType is "resource".
func (me TtypeType) IsResource() bool { return me.String() == "resource" }

//	This convenience method just performs a simple type conversion to TtypeType's alias type xsdt.Token.
func (me TtypeType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TtypeType is "title".
func (me TtypeType) IsTitle() bool { return me.String() == "title" }

type XsdGoPkgHasAttr_Type struct {
	Type TtypeType `xml:"type,attr,omitempty"`
}

type ThrefType xsdt.AnyURI

//	Since ThrefType is just a simple String type, this merely sets the current value from the specified string.
func (me *ThrefType) Set(s string) { (*xsdt.AnyURI)(me).Set(s) }

//	Since ThrefType is just a simple String type, this merely returns the current string value.
func (me ThrefType) String() string { return xsdt.AnyURI(me).String() }

//	This convenience method just performs a simple type conversion to ThrefType's alias type xsdt.AnyURI.
func (me ThrefType) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

type XsdGoPkgHasAttr_Href struct {
	Href ThrefType `xml:"href,attr,omitempty"`
}

type TroleType xsdt.AnyURI

//	This convenience method just performs a simple type conversion to TroleType's alias type xsdt.AnyURI.
func (me TroleType) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

//	Since TroleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TroleType) Set(s string) { (*xsdt.AnyURI)(me).Set(s) }

//	Since TroleType is just a simple String type, this merely returns the current string value.
func (me TroleType) String() string { return xsdt.AnyURI(me).String() }

type XsdGoPkgHasAttr_Role struct {
	Role TroleType `xml:"role,attr,omitempty"`
}

type TarcroleType xsdt.AnyURI

//	Since TarcroleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TarcroleType) Set(s string) { (*xsdt.AnyURI)(me).Set(s) }

//	Since TarcroleType is just a simple String type, this merely returns the current string value.
func (me TarcroleType) String() string { return xsdt.AnyURI(me).String() }

//	This convenience method just performs a simple type conversion to TarcroleType's alias type xsdt.AnyURI.
func (me TarcroleType) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

type XsdGoPkgHasAttr_Arcrole struct {
	Arcrole TarcroleType `xml:"arcrole,attr,omitempty"`
}

type TtitleAttrType xsdt.String

//	Since TtitleAttrType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtitleAttrType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TtitleAttrType is just a simple String type, this merely returns the current string value.
func (me TtitleAttrType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TtitleAttrType's alias type xsdt.String.
func (me TtitleAttrType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Title struct {
	Title TtitleAttrType `xml:"title,attr,omitempty"`
}

type TshowType xsdt.Token

//	Returns true if the value of this enumerated TshowType is "embed".
func (me TshowType) IsEmbed() bool { return me.String() == "embed" }

//	Returns true if the value of this enumerated TshowType is "other".
func (me TshowType) IsOther() bool { return me.String() == "other" }

//	Returns true if the value of this enumerated TshowType is "none".
func (me TshowType) IsNone() bool { return me.String() == "none" }

//	Since TshowType is just a simple String type, this merely sets the current value from the specified string.
func (me *TshowType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TshowType is just a simple String type, this merely returns the current string value.
func (me TshowType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TshowType's alias type xsdt.Token.
func (me TshowType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TshowType is "new".
func (me TshowType) IsNew() bool { return me.String() == "new" }

//	Returns true if the value of this enumerated TshowType is "replace".
func (me TshowType) IsReplace() bool { return me.String() == "replace" }

type XsdGoPkgHasAttr_Show struct {
	Show TshowType `xml:"show,attr,omitempty"`
}

type TactuateType xsdt.Token

//	Since TactuateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TactuateType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TactuateType is just a simple String type, this merely returns the current string value.
func (me TactuateType) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TactuateType's alias type xsdt.Token.
func (me TactuateType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TactuateType is "onLoad".
func (me TactuateType) IsOnLoad() bool { return me.String() == "onLoad" }

//	Returns true if the value of this enumerated TactuateType is "onRequest".
func (me TactuateType) IsOnRequest() bool { return me.String() == "onRequest" }

//	Returns true if the value of this enumerated TactuateType is "other".
func (me TactuateType) IsOther() bool { return me.String() == "other" }

//	Returns true if the value of this enumerated TactuateType is "none".
func (me TactuateType) IsNone() bool { return me.String() == "none" }

type XsdGoPkgHasAttr_Actuate struct {
	Actuate TactuateType `xml:"actuate,attr,omitempty"`
}

type TlabelType xsdt.NCName

//	Since TlabelType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlabelType) Set(s string) { (*xsdt.NCName)(me).Set(s) }

//	Since TlabelType is just a simple String type, this merely returns the current string value.
func (me TlabelType) String() string { return xsdt.NCName(me).String() }

//	This convenience method just performs a simple type conversion to TlabelType's alias type xsdt.NCName.
func (me TlabelType) ToXsdtNCName() xsdt.NCName { return xsdt.NCName(me) }

type XsdGoPkgHasAttr_Label struct {
	Label TlabelType `xml:"label,attr,omitempty"`
}

type TfromType xsdt.NCName

//	Since TfromType is just a simple String type, this merely returns the current string value.
func (me TfromType) String() string { return xsdt.NCName(me).String() }

//	This convenience method just performs a simple type conversion to TfromType's alias type xsdt.NCName.
func (me TfromType) ToXsdtNCName() xsdt.NCName { return xsdt.NCName(me) }

//	Since TfromType is just a simple String type, this merely sets the current value from the specified string.
func (me *TfromType) Set(s string) { (*xsdt.NCName)(me).Set(s) }

type XsdGoPkgHasAttr_From struct {
	From TfromType `xml:"from,attr,omitempty"`
}

type TtoType xsdt.NCName

//	Since TtoType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtoType) Set(s string) { (*xsdt.NCName)(me).Set(s) }

//	Since TtoType is just a simple String type, this merely returns the current string value.
func (me TtoType) String() string { return xsdt.NCName(me).String() }

//	This convenience method just performs a simple type conversion to TtoType's alias type xsdt.NCName.
func (me TtoType) ToXsdtNCName() xsdt.NCName { return xsdt.NCName(me) }

type XsdGoPkgHasAttr_To struct {
	To TtoType `xml:"http://www.w3.org/1999/xlink to,attr,omitempty"`
}

type XsdGoPkgHasAtts_SimpleAttrs struct {
	XsdGoPkgHasAttr_Show

	XsdGoPkgHasAttr_Actuate

	XsdGoPkgHasAttr_Type

	XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Role

	XsdGoPkgHasAttr_Arcrole

	XsdGoPkgHasAttr_Title
}

type XsdGoPkgHasAtts_ExtendedAttrs struct {
	XsdGoPkgHasAttr_Title

	XsdGoPkgHasAttr_Type

	XsdGoPkgHasAttr_Role
}

type XsdGoPkgHasAtts_TitleAttrs struct {
	XsdGoPkgHasAttr_Type

	//	xml:lang is not required, but provides much of the
	//	motivation for title elements in addition to attributes, and so
	//	is provided here for convenience.
	xml.XsdGoPkgHasAttr_Lang
}

type XsdGoPkgHasAtts_ResourceAttrs struct {
	XsdGoPkgHasAttr_Type

	XsdGoPkgHasAttr_Role

	XsdGoPkgHasAttr_Title

	XsdGoPkgHasAttr_Label
}

type XsdGoPkgHasAtts_LocatorAttrs struct {
	XsdGoPkgHasAttr_Href

	XsdGoPkgHasAttr_Role

	XsdGoPkgHasAttr_Title

	//	label is not required, but locators have no particular
	//	XLink function if they are not labeled.
	XsdGoPkgHasAttr_Label

	XsdGoPkgHasAttr_Type
}

type XsdGoPkgHasAtts_ArcAttrs struct {
	XsdGoPkgHasAttr_Arcrole

	XsdGoPkgHasAttr_Title

	XsdGoPkgHasAttr_Show

	XsdGoPkgHasAttr_Actuate

	XsdGoPkgHasAttr_From

	//	from and to have default behavior when values are missing
	XsdGoPkgHasAttr_To

	XsdGoPkgHasAttr_Type
}

type XsdGoPkgHasGroup_TitleModel struct {
}

//	If the WalkHandlers.XsdGoPkgHasGroup_TitleModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_TitleModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_TitleModel instance.
func (me *XsdGoPkgHasGroup_TitleModel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_TitleModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtitleEltType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_TitleModel

	XsdGoPkgHasAtts_TitleAttrs
}

//	If the WalkHandlers.TtitleEltType function is not nil (ie. was set by outside code), calls it with this TtitleEltType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TtitleEltType instance.
func (me *TtitleEltType) Walk() (err error) {
	if fn := WalkHandlers.TtitleEltType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_TitleModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Title struct {
	Title *TtitleEltType `xml:"http://www.w3.org/1999/xlink title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Title instance.
func (me *XsdGoPkgHasElem_Title) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Title struct {
	Titles []*TtitleEltType `xml:"title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Title function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Title instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Title instance.
func (me *XsdGoPkgHasElems_Title) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Title; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Titles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TresourceType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_TitleModel

	XsdGoPkgHasAtts_ResourceAttrs
}

//	If the WalkHandlers.TresourceType function is not nil (ie. was set by outside code), calls it with this TresourceType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TresourceType instance.
func (me *TresourceType) Walk() (err error) {
	if fn := WalkHandlers.TresourceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_TitleModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Resource struct {
	Resource *TresourceType `xml:"http://www.w3.org/1999/xlink resource"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Resource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Resource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Resource instance.
func (me *XsdGoPkgHasElem_Resource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Resource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Resource struct {
	Resources []*TresourceType `xml:"http://www.w3.org/1999/xlink resource"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Resource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Resource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Resource instance.
func (me *XsdGoPkgHasElems_Resource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Resource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Resources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_LocatorModel struct {
	XsdGoPkgHasElems_Title
}

//	If the WalkHandlers.XsdGoPkgHasGroup_LocatorModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_LocatorModel instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_LocatorModel instance.
func (me *XsdGoPkgHasGroup_LocatorModel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_LocatorModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlocatorType struct {
	XsdGoPkgHasGroup_LocatorModel

	XsdGoPkgHasAtts_LocatorAttrs
}

//	If the WalkHandlers.TlocatorType function is not nil (ie. was set by outside code), calls it with this TlocatorType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TlocatorType instance.
func (me *TlocatorType) Walk() (err error) {
	if fn := WalkHandlers.TlocatorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_LocatorModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Locator struct {
	Locator *TlocatorType `xml:"http://www.w3.org/1999/xlink locator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Locator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Locator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Locator instance.
func (me *XsdGoPkgHasElem_Locator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Locator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Locator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Locator struct {
	Locators []*TlocatorType `xml:"http://www.w3.org/1999/xlink locator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Locator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Locator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Locator instance.
func (me *XsdGoPkgHasElems_Locator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Locator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Locators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TarcType struct {
	XsdGoPkgHasGroup_LocatorModel

	XsdGoPkgHasAtts_ArcAttrs
}

//	If the WalkHandlers.TarcType function is not nil (ie. was set by outside code), calls it with this TarcType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TarcType instance.
func (me *TarcType) Walk() (err error) {
	if fn := WalkHandlers.TarcType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_LocatorModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Arc struct {
	Arc *TarcType `xml:"http://www.w3.org/1999/xlink arc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Arc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Arc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Arc instance.
func (me *XsdGoPkgHasElem_Arc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Arc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Arc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Arc struct {
	Arcs []*TarcType `xml:"http://www.w3.org/1999/xlink arc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Arc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Arc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Arc instance.
func (me *XsdGoPkgHasElems_Arc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Arc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Arcs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_ExtendedModel struct {
	XsdGoPkgHasElem_Locator

	XsdGoPkgHasElem_Arc

	XsdGoPkgHasElem_Title

	XsdGoPkgHasElem_Resource
}

//	If the WalkHandlers.XsdGoPkgHasGroup_ExtendedModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_ExtendedModel instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_ExtendedModel instance.
func (me *XsdGoPkgHasGroup_ExtendedModel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_ExtendedModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Locator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Arc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Intended for use as the type of user-declared elements to make them
//	simple links.
type Tsimple struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasGroup_TitleModel

	XsdGoPkgHasAtts_SimpleAttrs
}

//	If the WalkHandlers.Tsimple function is not nil (ie. was set by outside code), calls it with this Tsimple instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this Tsimple instance.
func (me *Tsimple) Walk() (err error) {
	if fn := WalkHandlers.Tsimple; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_TitleModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Intended for use as the type of user-declared elements to make them
//	extended links.
//	Note that the elements referenced in the content model are all abstract.
//	The intention is that by simply declaring elements with these as their
//	substitutionGroup, all the right things will happen.
type Textended struct {
	XsdGoPkgHasGroup_ExtendedModel

	XsdGoPkgHasAtts_ExtendedAttrs
}

//	If the WalkHandlers.Textended function is not nil (ie. was set by outside code), calls it with this Textended instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this Textended instance.
func (me *Textended) Walk() (err error) {
	if fn := WalkHandlers.Textended; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_ExtendedModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 18 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 18 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Arc            func(*XsdGoPkgHasElem_Arc, bool) error
	XsdGoPkgHasElems_Arc           func(*XsdGoPkgHasElems_Arc, bool) error
	XsdGoPkgHasElems_Title         func(*XsdGoPkgHasElems_Title, bool) error
	TresourceType                  func(*TresourceType, bool) error
	XsdGoPkgHasElem_Locator        func(*XsdGoPkgHasElem_Locator, bool) error
	XsdGoPkgHasGroup_ExtendedModel func(*XsdGoPkgHasGroup_ExtendedModel, bool) error
	XsdGoPkgHasCdata               func(*XsdGoPkgHasCdata, bool) error
	TlocatorType                   func(*TlocatorType, bool) error
	TarcType                       func(*TarcType, bool) error
	Tsimple                        func(*Tsimple, bool) error
	TtitleEltType                  func(*TtitleEltType, bool) error
	XsdGoPkgHasElem_Title          func(*XsdGoPkgHasElem_Title, bool) error
	XsdGoPkgHasElems_Locator       func(*XsdGoPkgHasElems_Locator, bool) error
	XsdGoPkgHasGroup_LocatorModel  func(*XsdGoPkgHasGroup_LocatorModel, bool) error
	Textended                      func(*Textended, bool) error
	XsdGoPkgHasGroup_TitleModel    func(*XsdGoPkgHasGroup_TitleModel, bool) error
	XsdGoPkgHasElem_Resource       func(*XsdGoPkgHasElem_Resource, bool) error
	XsdGoPkgHasElems_Resource      func(*XsdGoPkgHasElems_Resource, bool) error
}
