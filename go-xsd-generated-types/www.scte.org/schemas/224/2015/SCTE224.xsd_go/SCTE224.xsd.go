//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.scte.org/schemas/224/2015/SCTE224.xsd
package go_Scte224

import (
	xsdt "github.com/metaleap/go-xsd/types"
	xlink "github.comcast.com/jcolwe200/scte224/go-xsd-generated-types/www.w3.org/1999/xlink.xsd_go"
	xml "github.comcast.com/jcolwe200/scte224/go-xsd-generated-types/www.w3.org/2001/03/xml.xsd_go"
)

type TxsdMatchableMatch xsdt.Token

//	Returns true if the value of this enumerated TxsdMatchableMatch is "ALL".
func (me TxsdMatchableMatch) IsAll() bool { return me.String() == "ALL" }

//	Returns true if the value of this enumerated TxsdMatchableMatch is "ANY".
func (me TxsdMatchableMatch) IsAny() bool { return me.String() == "ANY" }

//	Returns true if the value of this enumerated TxsdMatchableMatch is "NONE".
func (me TxsdMatchableMatch) IsNone() bool { return me.String() == "NONE" }

//	Since TxsdMatchableMatch is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMatchableMatch) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TxsdMatchableMatch is just a simple String type, this merely returns the current string value.
func (me TxsdMatchableMatch) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMatchableMatch's alias type xsdt.Token.
func (me TxsdMatchableMatch) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

type XsdGoPkgHasAttr_Match_TxsdMatchableMatch_All struct {
	Match TxsdMatchableMatch `xml:"match,attr,omitempty"`
}

//	Returns the default value for Match -- "ALL"
func (me XsdGoPkgHasAttr_Match_TxsdMatchableMatch_All) MatchDefault() TxsdMatchableMatch {
	return TxsdMatchableMatch("ALL")
}

type XsdGoPkgHasAtts_Matchable struct {
	XsdGoPkgHasAttr_Match_TxsdMatchableMatch_All
}

type XsdGoPkgHasAttr_Effective_XsdtDateTime_ struct {
	Effective xsdt.DateTime `xml:"effective,attr,omitempty"`
}

type XsdGoPkgHasAttr_Expires_XsdtDateTime_ struct {
	Expires xsdt.DateTime `xml:"expires,attr,omitempty"`
}

type XsdGoPkgHasAtts_Eligible struct {
	XsdGoPkgHasAttr_Effective_XsdtDateTime_

	XsdGoPkgHasAttr_Expires_XsdtDateTime_
}

//	May be used to express additional identifiers (e.g. EIDR, Ad-ID)
type XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ struct {
	//	May be used to express additional identifiers (e.g. EIDR, Ad-ID)
	AltIDs []xsdt.AnyURI `xml:"AltID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIdentifiableTypeSequenceMetadata struct {
}

//	If the WalkHandlers.TxsdIdentifiableTypeSequenceMetadata function is not nil (ie. was set by outside code), calls it with this TxsdIdentifiableTypeSequenceMetadata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TxsdIdentifiableTypeSequenceMetadata instance.
func (me *TxsdIdentifiableTypeSequenceMetadata) Walk() (err error) {
	if fn := WalkHandlers.TxsdIdentifiableTypeSequenceMetadata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ struct {
	Metadata *TxsdIdentifiableTypeSequenceMetadata `xml:"http://www.scte.org/schemas/224/2015 Metadata"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ instance.
func (me *XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Metadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ struct {
	Ext *TxsdIdentifiableTypeSequenceMetadata `xml:"http://www.scte.org/schemas/224/2015 Ext"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ instance.
func (me *XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Id_XsdtAnyURI_ struct {
	Id xsdt.AnyURI `xml:"id,attr,omitempty"`
}

type XsdGoPkgHasAttr_Description_XsdtNormalizedString_ struct {
	Description xsdt.NormalizedString `xml:"description,attr,omitempty"`
}

type XsdGoPkgHasAttr_LastUpdated_XsdtDateTime_ struct {
	LastUpdated xsdt.DateTime `xml:"lastUpdated,attr,omitempty"`
}

type TIdentifiableType struct {
	XsdGoPkgHasAttr_Id_XsdtAnyURI_

	XsdGoPkgHasAttr_Description_XsdtNormalizedString_

	XsdGoPkgHasAttr_LastUpdated_XsdtDateTime_

	xml.XsdGoPkgHasAttr_Base

	//	May be used to express additional identifiers (e.g. EIDR, Ad-ID)
	XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_

	XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_

	XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_
}

//	If the WalkHandlers.TIdentifiableType function is not nil (ie. was set by outside code), calls it with this TIdentifiableType instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TIdentifiableType instance.
func (me *TIdentifiableType) Walk() (err error) {
	if fn := WalkHandlers.TIdentifiableType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReusableType struct {
	TIdentifiableType

	xlink.XsdGoPkgHasAttr_Href
}

//	If the WalkHandlers.TReusableType function is not nil (ie. was set by outside code), calls it with this TReusableType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TReusableType instance.
func (me *TReusableType) Walk() (err error) {
	if fn := WalkHandlers.TReusableType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TIdentifiableType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Audience struct {
	Audiences []*TAudienceType `xml:"http://www.scte.org/schemas/224/2015 Audience"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Audience function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Audience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Audience instance.
func (me *XsdGoPkgHasElems_Audience) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Audience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAudienceType struct {
	TReusableType

	XsdGoPkgHasElems_Audience

	XsdGoPkgHasAtts_Matchable
}

//	If the WalkHandlers.TAudienceType function is not nil (ie. was set by outside code), calls it with this TAudienceType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TAudienceType instance.
func (me *TAudienceType) Walk() (err error) {
	if fn := WalkHandlers.TAudienceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TReusableType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Audience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Audience struct {
	Audience *TAudienceType `xml:"http://www.scte.org/schemas/224/2015 Audience"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Audience function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Audience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Audience instance.
func (me *XsdGoPkgHasElem_Audience) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Audience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Audience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Audit struct {
	Audits []*TAuditType `xml:"http://www.scte.org/schemas/224/2015 Audit"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Audit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Audit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Audit instance.
func (me *XsdGoPkgHasElems_Audit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Audit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAuditTypeComplexContentExtensionTrigger xsdt.Token

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "GET".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsGet() bool { return me.String() == "GET" }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "STATUS".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsStatus() bool { return me.String() == "STATUS" }

//	Since TxsdAuditTypeComplexContentExtensionTrigger is just a simple String type, this merely returns the current string value.
func (me TxsdAuditTypeComplexContentExtensionTrigger) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAuditTypeComplexContentExtensionTrigger's alias type xsdt.Token.
func (me TxsdAuditTypeComplexContentExtensionTrigger) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "TIME".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsTime() bool { return me.String() == "TIME" }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "SIGNAL".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsSignal() bool { return me.String() == "SIGNAL" }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "DURATION".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsDuration() bool {
	return me.String() == "DURATION"
}

//	Since TxsdAuditTypeComplexContentExtensionTrigger is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAuditTypeComplexContentExtensionTrigger) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "NONE".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsNone() bool { return me.String() == "NONE" }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "PUT".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsPut() bool { return me.String() == "PUT" }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "DELETE".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsDelete() bool { return me.String() == "DELETE" }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionTrigger is "MANUAL".
func (me TxsdAuditTypeComplexContentExtensionTrigger) IsManual() bool { return me.String() == "MANUAL" }

type XsdGoPkgHasAttr_Trigger_TxsdAuditTypeComplexContentExtensionTrigger_ struct {
	Trigger TxsdAuditTypeComplexContentExtensionTrigger `xml:"trigger,attr,omitempty"`
}

type TxsdAuditTypeComplexContentExtensionResult xsdt.Token

//	This convenience method just performs a simple type conversion to TxsdAuditTypeComplexContentExtensionResult's alias type xsdt.Token.
func (me TxsdAuditTypeComplexContentExtensionResult) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionResult is "SUCCESS".
func (me TxsdAuditTypeComplexContentExtensionResult) IsSuccess() bool {
	return me.String() == "SUCCESS"
}

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionResult is "FAIL".
func (me TxsdAuditTypeComplexContentExtensionResult) IsFail() bool { return me.String() == "FAIL" }

//	Since TxsdAuditTypeComplexContentExtensionResult is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAuditTypeComplexContentExtensionResult) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TxsdAuditTypeComplexContentExtensionResult is just a simple String type, this merely returns the current string value.
func (me TxsdAuditTypeComplexContentExtensionResult) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Result_TxsdAuditTypeComplexContentExtensionResult_Success struct {
	Result TxsdAuditTypeComplexContentExtensionResult `xml:"result,attr,omitempty"`
}

//	Returns the default value for Result -- "SUCCESS"
func (me XsdGoPkgHasAttr_Result_TxsdAuditTypeComplexContentExtensionResult_Success) ResultDefault() TxsdAuditTypeComplexContentExtensionResult {
	return TxsdAuditTypeComplexContentExtensionResult("SUCCESS")
}

type XsdGoPkgHasAttr_Authorization_XsdtToken_ struct {
	Authorization xsdt.Token `xml:"authorization,attr,omitempty"`
}

type TxsdAuditTypeComplexContentExtensionPolicyMode xsdt.Token

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionPolicyMode is "REMOVE".
func (me TxsdAuditTypeComplexContentExtensionPolicyMode) IsRemove() bool {
	return me.String() == "REMOVE"
}

//	Since TxsdAuditTypeComplexContentExtensionPolicyMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAuditTypeComplexContentExtensionPolicyMode) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TxsdAuditTypeComplexContentExtensionPolicyMode is just a simple String type, this merely returns the current string value.
func (me TxsdAuditTypeComplexContentExtensionPolicyMode) String() string {
	return xsdt.Token(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdAuditTypeComplexContentExtensionPolicyMode's alias type xsdt.Token.
func (me TxsdAuditTypeComplexContentExtensionPolicyMode) ToXsdtToken() xsdt.Token {
	return xsdt.Token(me)
}

//	Returns true if the value of this enumerated TxsdAuditTypeComplexContentExtensionPolicyMode is "APPLY".
func (me TxsdAuditTypeComplexContentExtensionPolicyMode) IsApply() bool {
	return me.String() == "APPLY"
}

type XsdGoPkgHasAttr_PolicyMode_TxsdAuditTypeComplexContentExtensionPolicyMode_Apply struct {
	PolicyMode TxsdAuditTypeComplexContentExtensionPolicyMode `xml:"policyMode,attr,omitempty"`
}

//	Returns the default value for PolicyMode -- "APPLY"
func (me XsdGoPkgHasAttr_PolicyMode_TxsdAuditTypeComplexContentExtensionPolicyMode_Apply) PolicyModeDefault() TxsdAuditTypeComplexContentExtensionPolicyMode {
	return TxsdAuditTypeComplexContentExtensionPolicyMode("APPLY")
}

type TAuditType struct {
	XsdGoPkgHasAttr_PolicyMode_TxsdAuditTypeComplexContentExtensionPolicyMode_Apply

	TIdentifiableType

	XsdGoPkgHasElems_Audit

	XsdGoPkgHasAttr_Trigger_TxsdAuditTypeComplexContentExtensionTrigger_

	XsdGoPkgHasAttr_Result_TxsdAuditTypeComplexContentExtensionResult_Success

	xlink.XsdGoPkgHasAttr_Href

	xlink.XsdGoPkgHasAttr_Role

	XsdGoPkgHasAttr_Authorization_XsdtToken_
}

//	If the WalkHandlers.TAuditType function is not nil (ie. was set by outside code), calls it with this TAuditType instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TAuditType instance.
func (me *TAuditType) Walk() (err error) {
	if fn := WalkHandlers.TAuditType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TIdentifiableType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Audit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Audit struct {
	Audit *TAuditType `xml:"http://www.scte.org/schemas/224/2015 Audit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Audit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Audit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Audit instance.
func (me *XsdGoPkgHasElem_Audit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Audit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Audit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TViewingPolicyType struct {
	TReusableType

	XsdGoPkgHasElem_Audience
}

//	If the WalkHandlers.TViewingPolicyType function is not nil (ie. was set by outside code), calls it with this TViewingPolicyType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TViewingPolicyType instance.
func (me *TViewingPolicyType) Walk() (err error) {
	if fn := WalkHandlers.TViewingPolicyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TReusableType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Audience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ViewingPolicy struct {
	ViewingPolicies []*TViewingPolicyType `xml:"http://www.scte.org/schemas/224/2015 ViewingPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ViewingPolicy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ViewingPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ViewingPolicy instance.
func (me *XsdGoPkgHasElems_ViewingPolicy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ViewingPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ViewingPolicies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPolicyType struct {
	TReusableType

	XsdGoPkgHasElems_ViewingPolicy
}

//	If the WalkHandlers.TPolicyType function is not nil (ie. was set by outside code), calls it with this TPolicyType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPolicyType instance.
func (me *TPolicyType) Walk() (err error) {
	if fn := WalkHandlers.TPolicyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TReusableType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ViewingPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Policy struct {
	Policy *TPolicyType `xml:"http://www.scte.org/schemas/224/2015 Policy"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Policy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Policy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Policy instance.
func (me *XsdGoPkgHasElem_Policy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Policy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Policy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRemoveType struct {
	XsdGoPkgHasElem_Policy
}

//	If the WalkHandlers.TRemoveType function is not nil (ie. was set by outside code), calls it with this TRemoveType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TRemoveType instance.
func (me *TRemoveType) Walk() (err error) {
	if fn := WalkHandlers.TRemoveType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Policy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ struct {
	Removes []*TRemoveType `xml:"http://www.scte.org/schemas/224/2015 Remove"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ instance.
func (me *XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Removes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Duration_XsdtDuration_ struct {
	Duration xsdt.Duration `xml:"duration,attr,omitempty"`
}

type TApplyType struct {
	XsdGoPkgHasElem_Policy

	XsdGoPkgHasAttr_Duration_XsdtDuration_
}

//	If the WalkHandlers.TApplyType function is not nil (ie. was set by outside code), calls it with this TApplyType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TApplyType instance.
func (me *TApplyType) Walk() (err error) {
	if fn := WalkHandlers.TApplyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Policy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ struct {
	Applies []*TApplyType `xml:"http://www.scte.org/schemas/224/2015 Apply"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ instance.
func (me *XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Applies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ struct {
	Asserts []xsdt.String `xml:"http://www.scte.org/schemas/224/2015 Assert"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_SignalTolerance_XsdtDuration_ struct {
	SignalTolerance xsdt.Duration `xml:"signalTolerance,attr,omitempty"`
}

type TMatchSignalType struct {
	XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_

	XsdGoPkgHasAtts_Matchable

	XsdGoPkgHasAttr_SignalTolerance_XsdtDuration_
}

//	If the WalkHandlers.TMatchSignalType function is not nil (ie. was set by outside code), calls it with this TMatchSignalType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TMatchSignalType instance.
func (me *TMatchSignalType) Walk() (err error) {
	if fn := WalkHandlers.TMatchSignalType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ struct {
	MatchSignal *TMatchSignalType `xml:"http://www.scte.org/schemas/224/2015 MatchSignal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ instance.
func (me *XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MatchSignal.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_MatchTime_XsdtDateTime_ struct {
	MatchTime xsdt.DateTime `xml:"matchTime,attr,omitempty"`
}

type XsdGoPkgHasAttr_MatchOffset_XsdtDuration_ struct {
	MatchOffset xsdt.Duration `xml:"matchOffset,attr,omitempty"`
}

type XsdGoPkgHasAttr_Source_XsdtAnyURI_ struct {
	Source xsdt.AnyURI `xml:"source,attr,omitempty"`
}

type TMediaPointType struct {
	XsdGoPkgHasAtts_Eligible

	XsdGoPkgHasAttr_MatchTime_XsdtDateTime_

	XsdGoPkgHasAttr_MatchOffset_XsdtDuration_

	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	TIdentifiableType

	XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_

	XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_

	XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_
}

//	If the WalkHandlers.TMediaPointType function is not nil (ie. was set by outside code), calls it with this TMediaPointType instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TMediaPointType instance.
func (me *TMediaPointType) Walk() (err error) {
	if fn := WalkHandlers.TMediaPointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TIdentifiableType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_ struct {
	MediaPoints []*TMediaPointType `xml:"http://www.scte.org/schemas/224/2015 MediaPoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_ instance.
func (me *XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MediaPoints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TMediaType struct {
	TReusableType

	XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_

	XsdGoPkgHasAtts_Eligible

	XsdGoPkgHasAttr_Source_XsdtAnyURI_
}

//	If the WalkHandlers.TMediaType function is not nil (ie. was set by outside code), calls it with this TMediaType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TMediaType instance.
func (me *TMediaType) Walk() (err error) {
	if fn := WalkHandlers.TMediaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TReusableType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Media struct {
	Media *TMediaType `xml:"http://www.scte.org/schemas/224/2015 Media"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Media function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Media instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Media instance.
func (me *XsdGoPkgHasElem_Media) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Media; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Media.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MediaPoint struct {
	MediaPoint *TMediaPointType `xml:"http://www.scte.org/schemas/224/2015 MediaPoint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MediaPoint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MediaPoint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MediaPoint instance.
func (me *XsdGoPkgHasElem_MediaPoint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MediaPoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MediaPoint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ViewingPolicy struct {
	ViewingPolicy *TViewingPolicyType `xml:"http://www.scte.org/schemas/224/2015 ViewingPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ViewingPolicy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ViewingPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ViewingPolicy instance.
func (me *XsdGoPkgHasElem_ViewingPolicy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ViewingPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ViewingPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Entry struct {
	Entry *TIdentifiableType `xml:"http://www.scte.org/schemas/224/2015 Entry"`

	XsdGoPkgHasElem_Policy

	XsdGoPkgHasElem_ViewingPolicy

	XsdGoPkgHasElem_Audience

	XsdGoPkgHasElem_Audit

	XsdGoPkgHasElem_Media

	XsdGoPkgHasElem_MediaPoint
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entry instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Entry instance.
func (me *XsdGoPkgHasElem_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Media.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MediaPoint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Policy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ViewingPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Audience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Audit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Media struct {
	Medias []*TMediaType `xml:"http://www.scte.org/schemas/224/2015 Media"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Media function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Media instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Media instance.
func (me *XsdGoPkgHasElems_Media) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Media; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Medias {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Policy struct {
	Policies []*TPolicyType `xml:"http://www.scte.org/schemas/224/2015 Policy"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Policy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Policy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Policy instance.
func (me *XsdGoPkgHasElems_Policy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Policy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Policies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Entry struct {
	Entries []*TIdentifiableType `xml:"http://www.scte.org/schemas/224/2015 Entry"`

	XsdGoPkgHasElems_Media

	XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_

	XsdGoPkgHasElems_Policy

	XsdGoPkgHasElems_ViewingPolicy

	XsdGoPkgHasElems_Audience

	XsdGoPkgHasElems_Audit
}

//	If the WalkHandlers.XsdGoPkgHasElems_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Entry instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Entry instance.
func (me *XsdGoPkgHasElems_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Policy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ViewingPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Audience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Audit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Media.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		for _, x := range me.Entries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Size_XsdtNonNegativeInteger_ struct {
	Size xsdt.NonNegativeInteger `xml:"size,attr,omitempty"`
}

type TResultsType struct {
	XsdGoPkgHasElems_Entry

	XsdGoPkgHasAttr_Size_XsdtNonNegativeInteger_
}

//	If the WalkHandlers.TResultsType function is not nil (ie. was set by outside code), calls it with this TResultsType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TResultsType instance.
func (me *TResultsType) Walk() (err error) {
	if fn := WalkHandlers.TResultsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Results struct {
	Results *TResultsType `xml:"http://www.scte.org/schemas/224/2015 Results"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Results function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Results instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Results instance.
func (me *XsdGoPkgHasElem_Results) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Results; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Results.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Results struct {
	Resultses []*TResultsType `xml:"http://www.scte.org/schemas/224/2015 Results"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Results function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Results instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Results instance.
func (me *XsdGoPkgHasElems_Results) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Results; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Resultses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ struct {
	Assert xsdt.String `xml:"http://www.scte.org/schemas/224/2015 Assert"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ struct {
	Remove *TRemoveType `xml:"http://www.scte.org/schemas/224/2015 Remove"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_ instance.
func (me *XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Remove.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ struct {
	Apply *TApplyType `xml:"http://www.scte.org/schemas/224/2015 Apply"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_ instance.
func (me *XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Apply.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ struct {
	MatchSignals []*TMatchSignalType `xml:"http://www.scte.org/schemas/224/2015 MatchSignal"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ instance.
func (me *XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MatchSignals {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	May be used to express additional identifiers (e.g. EIDR, Ad-ID)
type XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ struct {
	//	May be used to express additional identifiers (e.g. EIDR, Ad-ID)
	AltID xsdt.AnyURI `xml:"http://www.scte.org/schemas/224/2015 AltID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ struct {
	Metadatas []*TxsdIdentifiableTypeSequenceMetadata `xml:"http://www.scte.org/schemas/224/2015 Metadata"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_ instance.
func (me *XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Metadatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ struct {
	Exts []*TxsdIdentifiableTypeSequenceMetadata `xml:"http://www.scte.org/schemas/224/2015 Ext"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_ instance.
func (me *XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Exts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 44 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 44 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TViewingPolicyType                                                                                            func(*TViewingPolicyType, bool) error
	XsdGoPkgHasElem_MediaPoint                                                                                    func(*XsdGoPkgHasElem_MediaPoint, bool) error
	XsdGoPkgHasElem_Results                                                                                       func(*XsdGoPkgHasElem_Results, bool) error
	XsdGoPkgHasElems_Results                                                                                      func(*XsdGoPkgHasElems_Results, bool) error
	TIdentifiableType                                                                                             func(*TIdentifiableType, bool) error
	TReusableType                                                                                                 func(*TReusableType, bool) error
	XsdGoPkgHasElems_Audit                                                                                        func(*XsdGoPkgHasElems_Audit, bool) error
	TRemoveType                                                                                                   func(*TRemoveType, bool) error
	XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_  func(*XsdGoPkgHasElem_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_, bool) error
	XsdGoPkgHasElems_Policy                                                                                       func(*XsdGoPkgHasElems_Policy, bool) error
	XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_                                        func(*XsdGoPkgHasElem_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_, bool) error
	XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_                                        func(*XsdGoPkgHasElems_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_, bool) error
	TAuditType                                                                                                    func(*TAuditType, bool) error
	TAudienceType                                                                                                 func(*TAudienceType, bool) error
	XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_                func(*XsdGoPkgHasElems_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_, bool) error
	TMediaPointType                                                                                               func(*TMediaPointType, bool) error
	TMediaType                                                                                                    func(*TMediaType, bool) error
	XsdGoPkgHasElem_Media                                                                                         func(*XsdGoPkgHasElem_Media, bool) error
	XsdGoPkgHasElem_Entry                                                                                         func(*XsdGoPkgHasElem_Entry, bool) error
	XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_         func(*XsdGoPkgHasElem_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_, bool) error
	XsdGoPkgHasElems_Audience                                                                                     func(*XsdGoPkgHasElems_Audience, bool) error
	XsdGoPkgHasElem_ViewingPolicy                                                                                 func(*XsdGoPkgHasElem_ViewingPolicy, bool) error
	TResultsType                                                                                                  func(*TResultsType, bool) error
	XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_                    func(*XsdGoPkgHasElem_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_, bool) error
	XsdGoPkgHasElem_Audit                                                                                         func(*XsdGoPkgHasElem_Audit, bool) error
	XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_                                       func(*XsdGoPkgHasElems_AssertsequenceMatchSignalTypeschema_Assert_XsdtString_, bool) error
	XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_ func(*XsdGoPkgHasElems_MatchSignalsequenceextensioncomplexContentMediaPointTypeschema_MatchSignal_TMatchSignalType_, bool) error
	XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_        func(*XsdGoPkgHasElems_MetadatasequenceIdentifiableTypeschema_Metadata_TxsdIdentifiableTypeSequenceMetadata_, bool) error
	XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_                       func(*XsdGoPkgHasElems_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_, bool) error
	TxsdIdentifiableTypeSequenceMetadata                                                                          func(*TxsdIdentifiableTypeSequenceMetadata, bool) error
	XsdGoPkgHasElems_ViewingPolicy                                                                                func(*XsdGoPkgHasElems_ViewingPolicy, bool) error
	TMatchSignalType                                                                                              func(*TMatchSignalType, bool) error
	XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_                 func(*XsdGoPkgHasElem_RemovesequenceextensioncomplexContentMediaPointTypeschema_Remove_TRemoveType_, bool) error
	XsdGoPkgHasCdata                                                                                              func(*XsdGoPkgHasCdata, bool) error
	TApplyType                                                                                                    func(*TApplyType, bool) error
	XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_                   func(*XsdGoPkgHasElems_ApplysequenceextensioncomplexContentMediaPointTypeschema_Apply_TApplyType_, bool) error
	TPolicyType                                                                                                   func(*TPolicyType, bool) error
	XsdGoPkgHasElem_Policy                                                                                        func(*XsdGoPkgHasElem_Policy, bool) error
	XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_         func(*XsdGoPkgHasElems_MediaPointsequenceextensioncomplexContentMediaTypeschema_MediaPoint_TMediaPointType_, bool) error
	XsdGoPkgHasElems_Media                                                                                        func(*XsdGoPkgHasElems_Media, bool) error
	XsdGoPkgHasElems_Entry                                                                                        func(*XsdGoPkgHasElems_Entry, bool) error
	XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_                                         func(*XsdGoPkgHasElem_AltIDsequenceIdentifiableTypeschema_AltID_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_                        func(*XsdGoPkgHasElem_ExtsequenceIdentifiableTypeschema_Ext_TxsdIdentifiableTypeSequenceExt_, bool) error
	XsdGoPkgHasElem_Audience                                                                                      func(*XsdGoPkgHasElem_Audience, bool) error
}
